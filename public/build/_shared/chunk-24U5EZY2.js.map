{
  "version": 3,
  "sources": ["empty-module:~/utils/db.server", "../../../app/components/index.tsx", "../../../app/components/books.tsx", "../../../app/utils/helpers.ts", "../../../app/components/nav.tsx"],
  "sourcesContent": ["module.exports = {};", "import type { Who } from '~/utils/types';\n\nimport { useEffect } from 'react';\nimport Books from '~/components/books';\nimport Nav from '~/components/nav';\nimport { useNavigate, useParams } from '@remix-run/react';\nimport { getUserIdFromParams } from '~/utils/helpers';\n\nconst localStorageKey = 'previous-who';\nconst desiredUserIds: Who[] = ['kate', 'chris'];\n\nexport default function Index() {\n\tconst params = useParams();\n\tconst navigate = useNavigate();\n\n\tconst userId = getUserIdFromParams(params);\n\n\tconsole.log(userId);\n\n\tuseEffect(() => {\n\t\tif (userId && !desiredUserIds.includes(userId as Who)) {\n\t\t\tnavigate('/');\n\t\t\treturn;\n\t\t}\n\n\t\tconst previousUserId = localStorage.getItem(localStorageKey);\n\n\t\tfor (const desiredUserId of desiredUserIds) {\n\t\t\tif (previousUserId === desiredUserId && userId !== desiredUserId) {\n\t\t\t\tnavigate(`/${previousUserId}`);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}, []);\n\n\tuseEffect(() => {\n\t\tif (userId === 'chris' || userId === 'kate') {\n\t\t\tlocalStorage.setItem(localStorageKey, userId);\n\t\t}\n\t}, [userId]);\n\n\treturn (\n\t\t<div className=\"p-8 w-full\">\n\t\t\t<Nav userId={userId as Who | null} />\n\t\t\t{userId && <Books userId={userId as Who} />}\n\t\t</div>\n\t);\n}\n", "import { UsersBooks } from '@prisma/client';\nimport type { LoaderFunction } from '@remix-run/node';\nimport { json } from '@remix-run/node';\nimport { useLoaderData } from '@remix-run/react';\nimport { db } from '~/utils/db.server';\nimport { getUserIdFromParams } from '~/utils/helpers';\nimport type { Who } from '~/utils/types';\n\ninterface IProps {\n\tuserId: Who;\n}\n\nexport default function Books({ userId }: IProps) {\n\tconst data = useLoaderData<LoaderData>();\n\treturn <div></div>;\n}\n\ntype LoaderData = {\n\tbooks: Array<{\n\t\tbookId: string;\n\t\treadAt: Date | null;\n\t\treadingOrder: number | null;\n\t\tbook: {\n\t\t\tid: string;\n\t\t\ttitle: string;\n\t\t\tauthors: Array<{ author: { id: string; name: string } }>;\n\t\t};\n\t}>;\n};\n\nexport const loader: LoaderFunction = async ({ params }) => {\n\tconst userId = getUserIdFromParams(params);\n\n\tif (!userId) {\n\t\tthrow new Response('Not Found', { status: 404 });\n\t}\n\n\tconst data: LoaderData = {\n\t\tbooks: await db.usersBooks.findMany({\n\t\t\twhere: { userId },\n\t\t\tselect: {\n\t\t\t\tbookId: true,\n\t\t\t\treadAt: true,\n\t\t\t\treadingOrder: true,\n\t\t\t\tbook: {\n\t\t\t\t\tselect: {\n\t\t\t\t\t\tid: true,\n\t\t\t\t\t\ttitle: true,\n\t\t\t\t\t\tauthors: {\n\t\t\t\t\t\t\tselect: {\n\t\t\t\t\t\t\t\tauthor: { select: { id: true, name: true } },\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t}),\n\t};\n\n\treturn json(data);\n};\n", "import type { Params } from '@remix-run/react';\n\nexport function getUserIdFromParams(\n\tparams: Readonly<Params<string>>,\n): string | null {\n\treturn params.userId === 'chris' || params.userId === 'kate'\n\t\t? params.userId\n\t\t: null;\n}\n", "import type { Who } from '~/utils/types';\n\nimport { useNavigate } from '@remix-run/react';\n\ninterface IProps {\n\tuserId: Who | null;\n}\n\nexport default function Nav({ userId }: IProps) {\n\tconst navigate = useNavigate();\n\treturn (\n\t\t<header className=\"w-full border-b-2 border-b-emerald-600 pb-8 mb-8\">\n\t\t\t<h1 className=\"text-4xl text-emerald-600 font-mono font-medium pb-4\">\n\t\t\t\tBookshelf\n\t\t\t</h1>\n\t\t\t<div className=\"text-xl\">\n\t\t\t\t<label htmlFor=\"userId\">Who are you?</label>\n\t\t\t\t<select\n\t\t\t\t\tid=\"userId\"\n\t\t\t\t\tvalue={userId ?? 'none'}\n\t\t\t\t\tonChange={e => navigate(`/${e.target.value}`)}\n\t\t\t\t\tclassName=\"ml-2\"\n\t\t\t\t>\n\t\t\t\t\t<option disabled value=\"none\">\n\t\t\t\t\t\tPlease choose\n\t\t\t\t\t</option>\n\t\t\t\t\t<option value=\"kate\">Kate</option>\n\t\t\t\t\t<option value=\"chris\">Chris</option>\n\t\t\t\t</select>\n\t\t\t</div>\n\t\t</header>\n\t);\n}\n"],
  "mappings": ";;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA,WAAO,UAAU;AAAA;AAAA;;;ACAjB;AAEA,oBAA0B;;;ACF1B;AAIA,gBAAmB;;;ACJnB;AAEO,6BACN,QACgB;AAChB,SAAO,OAAO,WAAW,WAAW,OAAO,WAAW,SACnD,OAAO,SACP;AAAA;;;ADKW,eAAe,EAAE,UAAkB;AACjD,QAAM,OAAO;AACb,SAAO,oCAAC,OAAD;AAAA;;;AEdR;AAQe,aAAa,EAAE,UAAkB;AAC/C,QAAM,WAAW;AACjB,SACC,oCAAC,UAAD;AAAA,IAAQ,WAAU;AAAA,KACjB,oCAAC,MAAD;AAAA,IAAI,WAAU;AAAA,KAAuD,cAGrE,oCAAC,OAAD;AAAA,IAAK,WAAU;AAAA,KACd,oCAAC,SAAD;AAAA,IAAO,SAAQ;AAAA,KAAS,iBACxB,oCAAC,UAAD;AAAA,IACC,IAAG;AAAA,IACH,OAAO,0BAAU;AAAA,IACjB,UAAU,OAAK,SAAS,IAAI,EAAE,OAAO;AAAA,IACrC,WAAU;AAAA,KAEV,oCAAC,UAAD;AAAA,IAAQ,UAAQ;AAAA,IAAC,OAAM;AAAA,KAAO,kBAG9B,oCAAC,UAAD;AAAA,IAAQ,OAAM;AAAA,KAAO,SACrB,oCAAC,UAAD;AAAA,IAAQ,OAAM;AAAA,KAAQ;AAAA;;;AHnB3B,IAAM,kBAAkB;AACxB,IAAM,iBAAwB,CAAC,QAAQ;AAExB,iBAAiB;AAC/B,QAAM,SAAS;AACf,QAAM,WAAW;AAEjB,QAAM,SAAS,oBAAoB;AAEnC,UAAQ,IAAI;AAEZ,+BAAU,MAAM;AACf,QAAI,UAAU,CAAC,eAAe,SAAS,SAAgB;AACtD,eAAS;AACT;AAAA;AAGD,UAAM,iBAAiB,aAAa,QAAQ;AAE5C,eAAW,iBAAiB,gBAAgB;AAC3C,UAAI,mBAAmB,iBAAiB,WAAW,eAAe;AACjE,iBAAS,IAAI;AACb;AAAA;AAAA;AAAA,KAGA;AAEH,+BAAU,MAAM;AACf,QAAI,WAAW,WAAW,WAAW,QAAQ;AAC5C,mBAAa,QAAQ,iBAAiB;AAAA;AAAA,KAErC,CAAC;AAEJ,SACC,oCAAC,OAAD;AAAA,IAAK,WAAU;AAAA,KACd,oCAAC,KAAD;AAAA,IAAK;AAAA,MACJ,UAAU,oCAAC,OAAD;AAAA,IAAO;AAAA;AAAA;",
  "names": []
}
