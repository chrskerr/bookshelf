{
  "version": 3,
  "sources": ["empty-module:~/utils/cookies.server", "browser-route-module:/Users/chris/Projects/bookshelf/app/routes/__index.tsx?browser", "../../../app/routes/__index.tsx"],
  "sourcesContent": ["module.exports = {};", "export { default } from \"/Users/chris/Projects/bookshelf/app/routes/__index.tsx\";", "import type { BooksData } from '~/loaders/books.server';\n\nimport { useLoaderData } from '@remix-run/react';\nimport Books from '~/components/books';\nimport type { Who } from '~/utils/types';\nimport type { ReactChildren } from 'react';\nimport React, { createContext, useEffect, useState } from 'react';\nimport type { LoaderFunction } from '@remix-run/node';\nimport { userIdCookie } from '~/utils/cookies.server';\n\nexport interface IContext {\n\tisAuthed: boolean;\n\tuserId: Who | null;\n\tupdateContext: (data: Partial<Omit<IContext, 'updateContext'>>) => void;\n}\n\nexport const Context = createContext<IContext>({\n\tisAuthed: false,\n\tuserId: null,\n\tupdateContext: () => {},\n});\n\nexport default function Layout({ children }: { children: ReactChildren }) {\n\tconst userId = useLoaderData<Who | null>();\n\n\tconst [context, setContext] = useState<IContext>({\n\t\tisAuthed: false,\n\t\tuserId: null,\n\t\tupdateContext: data => setContext(c => ({ ...c, ...data })),\n\t});\n\n\tuseEffect(() => {\n\t\tcontext.updateContext({ userId });\n\t}, [userId]);\n\n\treturn <Context.Provider value={context}>{children}</Context.Provider>;\n}\n\nexport const loader: LoaderFunction = async ({ request }) => {\n\tconst cookieHeader = request.headers.get('Cookie');\n\treturn cookieHeader ? await userIdCookie.parse(cookieHeader) : null;\n};\n"],
  "mappings": ";;;;;;;;;;;AAAA;AAAA;AAAA;AAAA,WAAO,UAAU;AAAA;AAAA;;;ACAjB;;;ACAA;AAMA,oBAA0D;AAE1D,qBAA6B;AAQtB,IAAM,UAAU,iCAAwB;AAAA,EAC9C,UAAU;AAAA,EACV,QAAQ;AAAA,EACR,eAAe,MAAM;AAAA;AAAA;AAGP,gBAAgB,EAAE,YAAyC;AACzE,QAAM,SAAS;AAEf,QAAM,CAAC,SAAS,cAAc,4BAAmB;AAAA,IAChD,UAAU;AAAA,IACV,QAAQ;AAAA,IACR,eAAe,UAAQ,WAAW,OAAM,MAAK,MAAM;AAAA;AAGpD,+BAAU,MAAM;AACf,YAAQ,cAAc,EAAE;AAAA,KACtB,CAAC;AAEJ,SAAO,oDAAC,QAAQ,UAAT;AAAA,IAAkB,OAAO;AAAA,KAAU;AAAA;",
  "names": []
}
