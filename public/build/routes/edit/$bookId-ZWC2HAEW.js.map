{
  "version": 3,
  "sources": ["browser-route-module:/Users/chris/Projects/bookshelf/app/routes/edit/$bookId.tsx?browser", "../../../../app/routes/edit/$bookId.tsx"],
  "sourcesContent": ["export { default } from \"/Users/chris/Projects/bookshelf/app/routes/edit/$bookId.tsx\";", "import type { LoaderFunction } from '@remix-run/node';\nimport { json } from '@remix-run/node';\nimport type { IBook } from '~/utils/types';\n\nimport { useLoaderData, useParams } from '@remix-run/react';\nimport { db } from '~/utils/db.server';\nimport { getUserIdFromRequest } from '~/utils/cookies.server';\n\nexport const loader: LoaderFunction = async ({ params, request }) => {\n\tconst bookId = params.bookId;\n\n\tconst userId = await getUserIdFromRequest(request);\n\n\tif (!userId) {\n\t\treturn undefined;\n\t}\n\n\tconst book: IBook | null = await db.book.findFirst({\n\t\twhere: { id: bookId },\n\t\tselect: {\n\t\t\tid: true,\n\t\t\ttitle: true,\n\t\t\tusers: {\n\t\t\t\twhere: { userId },\n\t\t\t\tselect: {\n\t\t\t\t\treadAt: true,\n\t\t\t\t\treadingOrder: true,\n\t\t\t\t},\n\t\t\t\ttake: 1,\n\t\t\t},\n\t\t\tauthors: {\n\t\t\t\tselect: {\n\t\t\t\t\tauthor: { select: { id: true, name: true } },\n\t\t\t\t},\n\t\t\t},\n\t\t\tseries: {\n\t\t\t\tselect: {\n\t\t\t\t\tname: true,\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t});\n\n\treturn json(book);\n};\n\nexport default function Update() {\n\tconst book = useLoaderData<IBook | null>();\n\tconst { bookId } = useParams();\n\treturn <div>{bookId}</div>;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;AAAA;;;ACAA;AAKA,gBAAmB;AACnB,qBAAqC;AAwCtB,kBAAkB;AAChC,QAAM,OAAO;AACb,QAAM,EAAE,WAAW;AACnB,SAAO,oCAAC,OAAD,MAAM;AAAA;",
  "names": []
}
