{
  "version": 3,
  "sources": ["empty-module:./utils/cookies.server", "browser-route-module:/Users/chris/Projects/bookshelf/app/root.tsx?browser", "../../app/root.tsx"],
  "sourcesContent": ["module.exports = {};", "export { default, links, meta } from \"/Users/chris/Projects/bookshelf/app/root.tsx\";", "import type { LoaderFunction, MetaFunction } from '@remix-run/node';\nimport {\n\tLinks,\n\tLiveReload,\n\tMeta,\n\tOutlet,\n\tScripts,\n\tScrollRestoration,\n\tuseLoaderData,\n} from '@remix-run/react';\nimport { createContext, useEffect, useState } from 'react';\n\nimport styles from './styles/app.css';\nimport { userIdCookie } from './utils/cookies.server';\nimport type { Who } from './utils/types';\n\nexport const meta: MetaFunction = () => ({\n\tcharset: 'utf-8',\n\ttitle: 'Bookshelf',\n\tviewport: 'width=device-width,initial-scale=1',\n});\n\nexport function links() {\n\treturn [{ rel: 'stylesheet', href: styles }];\n}\n\nexport interface IContext {\n\tisAuthed: boolean;\n\tuserId: Who | undefined;\n\tupdateContext: (data: Partial<Omit<IContext, 'updateContext'>>) => void;\n}\n\nexport const Context = createContext<IContext>({\n\tisAuthed: false,\n\tuserId: undefined,\n\tupdateContext: () => {},\n});\n\nexport default function App() {\n\tconst userId = useLoaderData<Who | undefined>();\n\n\tconst [context, setContext] = useState<IContext>({\n\t\tisAuthed: false,\n\t\tuserId: undefined,\n\t\tupdateContext: data => setContext(c => ({ ...c, ...data })),\n\t});\n\n\tuseEffect(() => {\n\t\tconsole.log(userId);\n\t\tcontext.updateContext({ userId });\n\t}, [userId]);\n\n\treturn (\n\t\t<html lang=\"en\">\n\t\t\t<head>\n\t\t\t\t<Meta />\n\t\t\t\t<Links />\n\t\t\t</head>\n\t\t\t<body>\n\t\t\t\t<Context.Provider value={context}>\n\t\t\t\t\t<Outlet />\n\t\t\t\t\t<ScrollRestoration />\n\t\t\t\t\t<Scripts />\n\t\t\t\t\t<LiveReload />\n\t\t\t\t</Context.Provider>\n\t\t\t</body>\n\t\t</html>\n\t);\n}\n\nexport const loader: LoaderFunction = async ({ request }) => {\n\tconst cookieHeader = request.headers.get('Cookie');\n\treturn cookieHeader ? await userIdCookie.parse(cookieHeader) : undefined;\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA,WAAO,UAAU;AAAA;AAAA;;;ACAjB;;;ACAA;AAUA,oBAAmD;;;;;;AAGnD,qBAA6B;AAGtB,IAAM,OAAqB,MAAO;AAAA,EACxC,SAAS;AAAA,EACT,OAAO;AAAA,EACP,UAAU;AAAA;AAGJ,iBAAiB;AACvB,SAAO,CAAC,EAAE,KAAK,cAAc,MAAM;AAAA;AAS7B,IAAM,UAAU,iCAAwB;AAAA,EAC9C,UAAU;AAAA,EACV,QAAQ;AAAA,EACR,eAAe,MAAM;AAAA;AAAA;AAGP,eAAe;AAC7B,QAAM,SAAS;AAEf,QAAM,CAAC,SAAS,cAAc,4BAAmB;AAAA,IAChD,UAAU;AAAA,IACV,QAAQ;AAAA,IACR,eAAe,UAAQ,WAAW,OAAM,MAAK,MAAM;AAAA;AAGpD,+BAAU,MAAM;AACf,YAAQ,IAAI;AACZ,YAAQ,cAAc,EAAE;AAAA,KACtB,CAAC;AAEJ,SACC,oCAAC,QAAD;AAAA,IAAM,MAAK;AAAA,KACV,oCAAC,QAAD,MACC,oCAAC,MAAD,OACA,oCAAC,OAAD,QAED,oCAAC,QAAD,MACC,oCAAC,QAAQ,UAAT;AAAA,IAAkB,OAAO;AAAA,KACxB,oCAAC,QAAD,OACA,oCAAC,mBAAD,OACA,oCAAC,SAAD,OACA,oCAAC,YAAD;AAAA;",
  "names": []
}
